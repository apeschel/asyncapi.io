<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting started on AsyncAPI Initiative</title>
    <link>https://www.asyncapi.io/docs/getting-started/</link>
    <description>Recent content in Getting started on AsyncAPI Initiative</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Feb 2019 13:56:52 +0100</lastBuildDate>
    
	<atom:link href="https://www.asyncapi.io/docs/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Event-driven architectures</title>
      <link>https://www.asyncapi.io/docs/getting-started/event-driven-architectures/</link>
      <pubDate>Mon, 01 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/event-driven-architectures/</guid>
      <description>All developers, architects, and product managers are used to REST APIs and the synchronous paradigm of communication. You make a request and wait for the response. This is exactly how the web works. You enter a URL (e.g., google.com) in the address bar of your favorite browser and it sends a request to the server. Following, the server sends the response with the content of the website. The web is the greatest implementation of a REST API.</description>
    </item>
    
    <item>
      <title>Coming from OpenAPI</title>
      <link>https://www.asyncapi.io/docs/getting-started/coming-from-openapi/</link>
      <pubDate>Mon, 01 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/coming-from-openapi/</guid>
      <description>Notice  This article is about version 2.0.0-rc1 of the specification. Please note that documentation and tooling support are minimum or inexistent yet. We&amp;rsquo;re working hard to update everything to version 2.0.0 as soon as possible. Thanks for your patience.
  If you&amp;rsquo;re coming from OpenAPI, you must know that AsyncAPI started as an adaptation of the OpenAPI specification. We wanted to have as much compatibility as possible between the two so users could reuse parts in both.</description>
    </item>
    
    <item>
      <title>AsyncAPI documents</title>
      <link>https://www.asyncapi.io/docs/getting-started/asyncapi-documents/</link>
      <pubDate>Mon, 01 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/asyncapi-documents/</guid>
      <description>Notice  This article is about version 2.0.0-rc1 of the specification. Please note that documentation and tooling support are minimum or inexistent yet. We&amp;rsquo;re working hard to update everything to version 2.0.0 as soon as possible. Thanks for your patience.
  An AsyncAPI document is a file that defines and annotates the different components of a specific Event-Driven API.
The format of the file must be JSON or YAML, however, only the subset of YAML that matches the JSON capabilities is allowed.</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://www.asyncapi.io/docs/getting-started/hello-world/</link>
      <pubDate>Mon, 01 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/hello-world/</guid>
      <description>Notice  This article is about version 2.0.0-rc1 of the specification. Please note that documentation and tooling support are minimum or inexistent yet. We&amp;rsquo;re working hard to update everything to version 2.0.0 as soon as possible. Thanks for your patience.
  Let&amp;rsquo;s define an application that&amp;rsquo;s capable of receiving a &amp;ldquo;hello {name}&amp;rdquo; message.
asyncapi: &#39;2.0.0-rc1&#39; id: &#39;urn:hello-world-app&#39; info: title: Hello world application version: &#39;0.1.0&#39; channels: hello: subscribe: message: payload: type: string pattern: &#39;^hello .</description>
    </item>
    
    <item>
      <title>Servers</title>
      <link>https://www.asyncapi.io/docs/getting-started/servers/</link>
      <pubDate>Wed, 03 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/servers/</guid>
      <description>Notice  This article is about version 2.0.0-rc1 of the specification. Please note that documentation and tooling support are minimum or inexistent yet. We&amp;rsquo;re working hard to update everything to version 2.0.0 as soon as possible. Thanks for your patience.
  In the previous lesson, we learned how to create the definition of a simple Hello World application, so let&amp;rsquo;s take it from there.
In this article, we will learn how to add &amp;ldquo;servers&amp;rdquo; to our AsyncAPI document.</description>
    </item>
    
    <item>
      <title>Publishing</title>
      <link>https://www.asyncapi.io/docs/getting-started/publishing/</link>
      <pubDate>Sat, 13 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/publishing/</guid>
      <description>Notice  This article is about version 2.0.0-rc1 of the specification. Please note that documentation and tooling support are minimum or inexistent yet. We&amp;rsquo;re working hard to update everything to version 2.0.0 as soon as possible. Thanks for your patience.
  In a previous lesson, we learned how to create the definition of a subscriber application. Receiving (and processing) messages is an important part of an event-driven architecture but, where are these messages coming from?</description>
    </item>
    
    <item>
      <title>Reusing messages</title>
      <link>https://www.asyncapi.io/docs/getting-started/reusing-messages/</link>
      <pubDate>Mon, 15 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/reusing-messages/</guid>
      <description>Notice  This article is about version 2.0.0-rc1 of the specification. Please note that documentation and tooling support are minimum or inexistent yet. We&amp;rsquo;re working hard to update everything to version 2.0.0 as soon as possible. Thanks for your patience.
  When defining the APIs of a producer and a consumer, we soon realize there&amp;rsquo;s —at least— one thing that is repeated: the messages. In this chapter, you&amp;rsquo;ll learn how to reuse message definitions so you don&amp;rsquo;t have to maintain multiple copies of the same thing (with the problems it can carry.</description>
    </item>
    
    <item>
      <title>Reusing schemas</title>
      <link>https://www.asyncapi.io/docs/getting-started/reusing-schemas/</link>
      <pubDate>Mon, 15 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/reusing-schemas/</guid>
      <description>Notice  This article is about version 2.0.0-rc1 of the specification. Please note that documentation and tooling support are minimum or inexistent yet. We&amp;rsquo;re working hard to update everything to version 2.0.0 as soon as possible. Thanks for your patience.
  To illustrate how schema reusability works on AsyncAPI, we&amp;rsquo;re going to enhance the Hello world publisher application to make it, say, a bit less &amp;ldquo;hello world&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Adding security</title>
      <link>https://www.asyncapi.io/docs/getting-started/security/</link>
      <pubDate>Tue, 16 Apr 2019 10:56:52 +0100</pubDate>
      
      <guid>https://www.asyncapi.io/docs/getting-started/security/</guid>
      <description>Notice  This article is about version 2.0.0-rc1 of the specification. Please note that documentation and tooling support are minimum or inexistent yet. We&amp;rsquo;re working hard to update everything to version 2.0.0 as soon as possible. Thanks for your patience.
  In production environments, your API may have to access a message broker that&amp;rsquo;s protected by some auth mechanisms. Examples of these are:
 User &amp;amp; password Certificates API keys OAuth 2  If you&amp;rsquo;re using AsyncAPI to define an API that connects to a message broker, you&amp;rsquo;ll most probably make use of user/password or certificates.</description>
    </item>
    
  </channel>
</rss>